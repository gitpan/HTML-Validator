package HTML::Validator;

# Copyright 1997,1998 Sami Itkonen <si@iki.fi>
#
# Distributed under the GNU General Public License

@ISA=qw(LWP::Simple);

use strict;
use vars qw($VERSION);
use LWP::Simple;
use FileHandle;
use Carp;
$VERSION = "0.05";

my $tmpfile;

my $defaultdtd = 'html4';

my $dtdmap = {
     'html4'       => q{PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"},
     'html4strict' => q{PUBLIC "-//W3C//DTD HTML 4.0//EN"},
     'html4frame'  => q{PUBLIC "-//W3C//DTD HTML 4.0 Frameset//EN"},
     'html3.2'     => q{PUBLIC "-//W3C//DTD HTML 3.2//EN"},
     'html3'  => q{PUBLIC  "-//IETF//DTD HTML 3.0//EN//"},
     'html2'  => q{PUBLIC "-//IETF//DTD HTML 2.0//EN"},
     'nshtml' => q{PUBLIC "-//Netscape Comm. Corp.//DTD HTML//EN"},
     'iehtml' => q{PUBLIC "-//Microsoft//DTD Internet Explorer 3.0 HTML//EN"},
};

=head1 NAME

HTML::Validator - HTML validation by using nsgmls

=head1 SYNOPSIS

 use HTML::Validator;
 $doc = new HTML::Validator($file);
 $doc->validate;
 print "Document is valid\n" if $doc->is_valid;

=head1 DESCRIPTION

This module can be used to validate HTML (or SGML) documents. For the
validation itself, it uses nsgmls and a set of document type definition
files (aka DTDs).

HTML::Validator uses I<libwww-perl> to validate remote files.

=cut

#---------------------------------------------
# The constructor
#---------------------------------------------

sub new {
  my $this = shift;
  my $class = ref($this) || $this;
  my $self = {};
  bless $self, $class;
#    $self->initialize();
  my $file = shift;
  $tmpfile = "/tmp/validator.$$";
  $self->{tmpfile} = $tmpfile;
  $self->open($file) if defined $file; 
  $self->{catalog} = "@DTD@/catalog";
  $self->{nsgmls} = "@NSGMLS@";
  $self->{defaultdtd} = $defaultdtd;
  $self->{dtdmap} = $dtdmap;
  return $self;
}

=over 4

=item $doc->open($file)

The file or url will be used as the document to validate. This method
will be called implicitely if the constructor is called with an argument.

=cut

#---------------------------------------------
# Open a file for read
#---------------------------------------------

sub open {
  my $obj = shift;
  my $file = shift;
  return undef if defined $obj->{file};
  $obj->{fh} = new FileHandle;
  $obj->{url} = $file;
  if ($file =~ m|^(\w+)://|) {
    $obj->{file} = $obj->{tmpfile};
    $obj->{useLWP} = 1;
  }
  else {
    return undef unless -r $file;
    $obj->{file} = $obj->{tmpfile};
    $obj->{url} = $file;
  }
  return 1;
}

=item $doc->doctype

Returns the document type.

The return value is undefined if no filename has been passed to the 
object via the constructor or the I<open> method.

If the file has not been retrieved yet, it will be done.

=cut

#---------------------------------------------
# read the doctype
#---------------------------------------------

sub doctype {
  my $obj = shift;
  
  my ($input) = shift;
  if (defined $input) {
    $obj->{newdoctype} = $input;
  }
  else {
    return undef unless defined $obj->{file};
    $obj->get_file unless defined $obj->{data};
    return $obj->{doctype};
    
  }
}

=item $doc->checkdtd

Finds out the actual name of document type definition file that is used.
The return value is the name of the file, or undefined if the document type
is not defined.

=cut

#---------------------------------------------
# check which dtd is used
#---------------------------------------------

sub checkdtd {
  my $obj = shift;
  return $obj->{dtdfile} if defined $obj->{dtdfile};
  return undef unless defined $obj->{doctype};
#  print $obj->{doctype},"\n";
  my $fh = new FileHandle;
  return -1 unless open($fh,$obj->{catalog});
  my $dtdregexp = $obj->{doctype};
  $dtdregexp =~ s/\s+/\\s\+/g;
#  print $dtdregexp,"\n";
  while (my $line = <$fh>) {
    if (my ($dtdfile) = $line =~ /$dtdregexp\s+(.*?)$/) {
      close($fh);
      $obj->{dtdfile} = $dtdfile;
      return $dtdfile;
    }
  }
  close($fh);
  return undef;
}

=item $doc->validate

Validates the document. The return value is a reference to an array 
containing the modified output from nsgmls.

=cut

#---------------------------------------------
# validate the file
#---------------------------------------------

sub validate {
  my $obj = shift;
  return $obj->{errors} if defined $obj->{errors};
  my $file = $obj->{file};
#  print "$file\n";
  unless (defined $file) {
    $obj->message("file not found");
    return undef;
  }

  $obj->get_file unless defined $obj->{data};

#  if ($obj->{useLWP}) {
#    $obj->get_libwww;
#  }	
#  else {
#    system("cp",$obj->{url},$obj->{file});
#  }

  if (defined $obj->{errors}) {
    return $obj->{errors};
  }
  my $fh = $obj->{fh};
  my $nsgmls = $obj->{nsgmls};
  my $catalog = $obj->{catalog};
  
  if ($nsgmls =~ m:/: && ! -e $nsgmls) {
#    carp("nsgmls binary '$nsgmls' not found");
    $obj->message("Nsgmls not found");
    return undef;
  }
#  print "$file $nsgmls $catalog\n";
  if (!open($fh,"$nsgmls -s -c$catalog $file 2>&1 |")) {
    $obj->message("Unable to execute nsgmls");
    return undef;
  }

#  print "$file $nsgmls $catalog\n";
  my $oldsep = $/;
  undef $/;
  $obj->{raw_output} = <$fh>;
#  print $obj->{raw_output},"\n";
  $/ = $oldsep;

  $obj->{valid} = 1;
#  $obj->message("valid");
  $obj->parse_errors;
  $obj->message("Document is valid") if $obj->{valid};
  return $obj->{errors};
}

=item $doc->get_file

Internal method to get the file and process the doctype information.

=cut

#---------------------------------------------
# get the file and process the doctype information
#---------------------------------------------

sub get_file {
  my $obj = shift;
  return $obj->{data} if defined $obj->{data};
  return undef unless defined $obj->{file};
  my $fh = new FileHandle;
  my $data;
  if ($obj->{useLWP}) {
    $data = get($obj->{url});
  }
  else {
    my $oldsep = $/;
    undef $/;
    return undef unless open($fh,$obj->{url});
    
    $data = <$fh>;
    close($fh);
    $/ = $oldsep;
    
  }

  my ($dtd) = $data =~ /^\s*\<\s*\!DOCTYPE HTML\s*(.*?)\>\s*/i;
  $obj->{doctype} = $dtd;
  $obj->{data} = $data;
    
  if (my $type =  $obj->{newdoctype}) {
    if (my $dtdstr = $obj->{dtdmap}->{$type}) {
      $obj->replace_dtd($dtdstr);
    }
  }
  elsif ($dtd =~ /^\s*$/) {
    $obj->replace_dtd;
  }

  $obj->checkdtd;
#  print $data,"\n";
#    system("cp",$obj->{url},$obj->{file});

  return undef unless open($fh,">$obj->{file}");
  print $fh $obj->{data};
  close($fh);
}

=item $doc->replace_dtd

Replaces the document type definition on the file. The new dtd is the
first argument, or the default dtd if no argument is supplied.

=cut

#---------------------------------------------
# store the http file
#---------------------------------------------

sub replace_dtd {
  my $obj = shift;
  my ($dtd) = @_;
  $dtd = $obj->{dtdmap}->{$obj->{defaultdtd}} unless defined $dtd;
  my $dtdstr = "<!DOCTYPE HTML " . $dtd . ">";
#  print $dtd,"\n";
  my $data = $obj->{data};
  if ($obj->{doctype} =~ /^\s*$/) {
    # no doctype; need a new one
    $data =~ s/^/$dtdstr\n/;
    $obj->message("No document type defined");
  }
  else {
    # just replace it
    $data =~ s/^\s*\<\s*\!DOCTYPE HTML\s*(.*?)\>\s*/$dtdstr\n/i;
  }
  $obj->message("Replacing dtd with '$dtd'");
  $obj->{data} = $data;
#  print $obj->{newdoctype},"\n";
#  print $obj->{defaultdtd},"\n";
#  print "$data\n";
  $obj->{doctype} = $dtd;
}

=item $doc->errors

Returns an error from nsgmls error output queue.

=cut

#---------------------------------------------
# the error output
#---------------------------------------------

sub errors {
  my $obj = shift;
  my $r = $obj->{errors};
  my @array;
  @array = @{$r};
  my $error = shift @array;
#  print $error,"\n";
  $obj->{errors} = \@array;
  return $error;
}


=item $doc->parse_errors

Internal method to parse the raw nsgmsl output to a more readable form.
If you want to call this method more than once per object, purge the error
output queue with $doc->errors first.

=cut

#---------------------------------------------
# parse the nsgmls errors
#---------------------------------------------

sub parse_errors {
  my $obj = shift;
#  print $obj->{raw_output},"\n";
  return undef unless defined $obj->{raw_output};
  return undef if defined $obj->{errors};

#  print $obj->{raw_output};
#  no strict "subs";
#  my @lines = $obj->{raw_output};
#  print @lines;
#  my $line;
#  foreach $line (@lines) {
#    print "$line FOO\n";
#  }
  my $output = $obj->{raw_output};
  
  my @errors;
  my $i=0;

  while ($output =~ /^(.*?)\n/g) {
    my $line = $1;

    $line =~ s/^$obj->{nsgmls}://;
    next if $line =~ /\.dtd:(\d+):(\d):E: /;
    next if $line =~ /^\s*$/;

    if ($line =~ s/^$obj->{file}://) {

      if ($line =~ s/^(\d+):\d+:E: // || $line =~ s/^(\d+):\d+: //
	 || $line =~ s/^(\d+):\d+:W: //) {
	$errors[$i] = " Line $1: ";
      }
      $obj->message("Document is invalid") unless $obj->{valid} eq 0;
      $obj->{valid} = 0;
      $errors[$i] .= "$line";
      $i++;
    }
    $output =~ s/^.*?\n//;
  }
  $obj->{errors} = \@errors;
}

=item $doc->is_valid

Returns 1 if document is valid, 0 if document is invalid and undef if
document hasn't been validated yet.

=cut

#---------------------------------------------
# is the document valid ?
#---------------------------------------------

sub is_valid {
  my $obj = shift;
  return $obj->{valid};
}

=item $doc->source

Contains the source of the HTML file as a scalar.

=cut

#---------------------------------------------
# the source of the HTML file
#---------------------------------------------

sub source {
  my $obj = shift;
  return $obj->{data} if defined $obj->{data};
  return undef unless defined $obj->{file};
  $obj->get_file unless defined $obj->{data};
  return $obj->{data};
}

=item $doc->message

Contains the message queue. If called with an argument, places a new message
to the queue, without an argument a message (if any) is removed.

If the argument is '-1', the last message on the queue is returned.

=cut

#----------------------------------------------
# the message HTML::Validator wants to send out
#----------------------------------------------

sub message {
  my $obj = shift;
  my ($msg) = @_;
  my $r = $obj->{message};
  my @array;
  @array = @{$r} if defined $r;
  if (defined $msg) {
#    print "adding message '$msg'\n";
    if ($msg eq -1) {
      $msg = pop (@array);
    }
    else {
      push (@array,$msg);
    }
  }
  else {
    $msg = shift (@array);
#    print "removing message '$msg'\n";
  }
  $obj->{message} = \@array;
#  print @{$r},"\n" if defined $r;
  return $msg;
}

#----------------------------------------------
# The destructor
#----------------------------------------------

END { 
  my $obj = shift;
#  print $tmpfile,"\n";
  unlink $tmpfile;
};

1;

__END__

=back

=head1 VARIABLES

=item $doc->{nsgmls}

The used I<nsgmls> binary

=item $doc->{catalog}

The used catalog file

=item $doc->{message}

Array of messages

=item $doc->{doctype}

The document type for the document

=item $doc->{defaultdtd}

The default type for the document. By default this is 'html4'.

=item $doc->{dtdfile}

The dtd used for the document

=item $doc->{dtdmap}

The mapping for document types and the explicit document type definition
strings

=head1 REQUIREMENTS

  HTML::Validator requires that

=over 3

=item *

I<nsgmls> is installed. It comes with James Clark's I<sp> SGML toolkit,
I<http://www.jclark.com/sp/howtoget.htm>

=item *

you have a reasonable set of document type files. For this purpose, you can use
W3C's sgml library at I<http://validator.w3.org/sgml-lib.tar.gz>

=back

=head1 SEE ALSO

L<LWP>, L<nsgmls>

=head1 ACKNOWLEDGEMENTS

Thanks go to Heikki Kantola <hezu@iki.fi>, for his help in the early testing
phases and his excellent knowledge about HTML standards.

=head1 AVAILABILITY

The latest version of HTML::Validator can be found from 
I<http://www.iki.fi/si/HTML-Validator/>.

It is also available from CPAN (I<http://www.perl.com/CPAN/>).

=head1 COPYRIGHT

HTML::Validator is (c) 1997-1999 Sami Itkonen <si@iki.fi>

HTML::Validator is distributed under the GNU General Public License.

=cut
